name: .NET Core Desktop (MSIX Build)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-latest

    env:
      Solution_Name: JDMyFiles.sln
      Wap_Project_Path: JD.PhotoDuplicates\JD.PhotoDuplicates.csproj
      Wap_Project_Directory: JD.PhotoDuplicates  # Directory where .appxupload is generated
      Appx_Bundle: Always
      Appx_Bundle_Platforms: x64|x86  # Specify target platforms
      Appx_Package_Build_Mode: StoreUpload  # Or 'SideLoad' for testing
      Package_Certificate_Key_File: GitHubActionsWorkflow.pfx
      Package_Certificate_Password: ${{ secrets.Pfx_Key }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Restore NuGet packages (optional if using `dotnet build` later)
      - name: Restore dependencies
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

      # Build & Package the WAP project
      - name: Build MSIX package
        run: |
          msbuild "$env:Wap_Project_Path" `
            /p:Configuration=${{ matrix.configuration }} `
            /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode `
            /p:AppxBundle=$env:Appx_Bundle `
            /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" `
            /p:PackageCertificateKeyFile="$env:Package_Certificate_Key_File" `
            /p:PackageCertificatePassword="$env:Package_Certificate_Password"

      # Upload the generated .appxupload or .msixupload
      - name: Upload MSIX package
        uses: actions/upload-artifact@v4
        with:
          name: MSIX_Package_${{ matrix.configuration }}
          path: ${{ env.Wap_Project_Directory }}\AppPackages\**\*.appxupload